#nullable enable
Funcky.Async.Extensions.AsyncEnumerableExtensions
static Funcky.Async.Extensions.AsyncEnumerableExtensions.ElementAtOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.FirstOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.FirstOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.FirstOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.FirstOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Intersperse<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource element) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.LastOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.LastOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.LastOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.LastOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Pairwise<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.Pairwise<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<(TSource Front, TSource Back)>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SingleOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SingleOrNoneAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SingleOrNoneAwaitAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.SingleOrNoneAwaitWithCancellationAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TSource>>
static Funcky.Async.Extensions.AsyncEnumerableExtensions.TakeEvery<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int interval) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereSelect<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, Funcky.Monads.Option<TOutput>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereSelectAwait<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TOutput>>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Async.Extensions.AsyncEnumerableExtensions.WhereSelectAwaitWithCancellation<TSource, TOutput>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TOutput>>>! selector) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static Funcky.Async.Functional.RetryAsync<TResult>(System.Func<System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>>! producer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static Funcky.Async.Functional.RetryAsync<TResult>(System.Func<System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>>! producer, Funcky.RetryPolicies.IRetryPolicy! retryPolicy, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Funcky.Monads.Option<TResult>>
